#!/usr/bin/env python
# coding: utf-8

# In[43]:


get_ipython().system('pip install numpy')
get_ipython().system('pip install pandas')
get_ipython().system('pip install matplotlib')
get_ipython().system('pip install seaborn')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


# In[43]:


get_ipython().system('pip install numpy')
get_ipython().system('pip install pandas')
get_ipython().system('pip install matplotlib')
get_ipython().system('pip install seaborn')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


# In[20]:


geoinfo_df = pd.read_csv('geoinfo.csv')
drought_df = pd.read_csv('drought2012-2023.csv')


# In[21]:


print(geoinfo_df.head()) # Display first 5 rows of geoinfo_df
print(drought_df.head()) # Display first 5 rows of drought_df


# In[26]:


pip install openpyxl


# In[27]:


conda install openpyxl


# In[30]:


path_to_file = "path/to/9-ok-county.xlsx"


# In[31]:


ok_county_df = pd.read_excel('9 - OK County.xlsx')


# In[32]:


print(ok_county_df.head())


# In[35]:


print(geoinfo_df.columns)
print(ok_county_df.columns)


# In[37]:


import pandas as pd

# Read the data from the three datasets
data_2016 = pd.read_excel('Meso-Soil 2016.xlsx')
data_2021 = pd.read_excel('Meso-Soil 2021.xlsx')
data_general = pd.read_excel('Meso-Soil.xlsx')

# Select only the columns of interest
columns_of_interest = ['Theta_r cm3/cm3', 'Theta_s cm3/cm3']
data_2016 = data_2016[columns_of_interest]
data_2021 = data_2021[columns_of_interest]
data_general = data_general[columns_of_interest]

# Concatenate the dataframes vertically
all_data = pd.concat([data_2016, data_2021, data_general])

# Plot histograms of the two variables
all_data.hist(column=['Theta_r cm3/cm3', 'Theta_s cm3/cm3'], bins=20)

# Show the plots
import matplotlib.pyplot as plt
plt.show()


# In[44]:


get_ipython().system('pip install nltk')


# In[48]:


get_ipython().system('pip install pyrosettacolabsetup')


# In[51]:


get_ipython().system('pip install rosetta')


# In[53]:


import nltk


# In[56]:


import numpy as np
import pandas as pd
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt


# In[57]:


# Load the soil data
data = pd.read_excel("Meso-Soil 2016.xlsx")
data = data.dropna(subset=["Theta_r cm3/cm3", "Theta_s cm3/cm3"])
theta_r = data["Theta_r cm3/cm3"].values
theta_s = data["Theta_s cm3/cm3"].values


# In[60]:


# Define the van Genuchten equation
def van_genuchten(theta, theta_r, theta_s, alpha, n, m):
    p = 1.0 / n
    Se = (theta - theta_r) / (theta_s - theta_r)
    k = alpha * np.sqrt(Se) * (1 - (1 - Se ** (1 / m)) ** m) ** 2
    return k


# In[63]:


import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Load the soil data
data = pd.read_excel("Meso-Soil 2016.xlsx")
data = data.dropna(subset=["Theta_r cm3/cm3", "Theta_s cm3/cm3"])
theta_r = data["Theta_r cm3/cm3"].values
theta_s = data["Theta_s cm3/cm3"].values

def van_genuchten(theta, theta_r, theta_s, alpha, n, m):
    p = 1.0 / n
    Se = (theta - theta_r) / (theta_s - theta_r)
    Se[Se < 0] = 0  # Set negative values to zero
    Se[Se > 1] = 1  # Set values greater than one to one
    k = alpha * np.sqrt(Se) * (1 - (1 - Se ** (1 / m)) ** m) ** 2
    return k

# Fit the van Genuchten equation to the data
popt, pcov = curve_fit(van_genuchten, theta_s, theta_r, p0=[0.1, 0.5, 0.01, 1.5, 1.5])

# Plot the fitted curve
theta_range = np.linspace(theta_r.min(), theta_s.max(), 100)
k_fit = van_genuchten(theta_range, *popt)
plt.plot(k_fit, theta_range, label="Fitted curve")
plt.scatter(theta_r, theta_s, label="Measured data")
plt.xlabel("Theta_r (cm3/cm3)")
plt.ylabel("Theta_s (cm3/cm3)")
plt.legend()
plt.show()


# In[ ]:




